hello()
?hello
?heiio
?hello
hello()
?hello
?hello
?hello
?create_dataset
create_dataset()
?create_dataset
?create_dataset
?convert_scaled_data
?convert_scaled_data
?forecast.data.frame
?forecast.data.frame
?forecast.data.frame
?forecast.data.frame
?forecast.data.frame
usethis::use_package(package = "tidyverse", type = "Depends")
usethis::use_package(package = "tidyverse", type = "Imports")
usethis::use_package(package = "ggplot2", type = "Imports")
usethis::use_package(package = "tidyr", type = "Imports")
usethis::use_package(package = "dplyr", type = "Imports")
usethis::use_package(package = "forecast", type = "Imports")
usethis::use_package(package = "tidyverse", type = "Depends")
?lstmdata
?arima.forecast.data.frame
devtools::build()
c("hi") + c("mm")
usethis::use_package(package = "patchwork", type = "Imports")
usethis::use_package(package = "readxl", type = "Imports")
usethis::use_package(package = "utils", type = "Imports")
usethis::use_package(package = "purrr", type = "Imports")
?read.xport
??read.xport
usethis::use_package(package = "foreign", type = "Imports")
library(foreign)
file.time <- data.frame(
date = seq(as.Date("2020-01-01"), by = "month", length.out = 36),
incidence.rate = rnorm(36, mean = 50, sd = 10)
)
# 绘制趋势图
arima.tendency.chart(file.time, "incidence.rate", title = "Incidence Rate Trend")
file.time
library(scales)
usethis::use_package(package = "scales", type = "Imports")
usethis::use_package(package = "tools", type = "Imports")
library(tools)
library(forecast)
usethis::use_package(package = "tseries", type = "Imports")
library(tseries)
se_values <- coef_values[, 2]  # 第二列是标准误差 (s.e.)
usethis::use_package(package = "broom", type = "Imports")
library(broom)
?stat.confidence.interval
?stat.confidence.interval
file <- read_csv("/Users/democardla/Desktop/R/布病时间序列/data/2017-2023_copy.csv")
View(file.time)
file <- read_csv("/Users/democardla/Desktop/R/布病时间序列/data/2017-2023_copy.csv")
View(file)
splited.sample <- arima.split.sample(file, cut.point = "2023-01-01")
model.list <- list(
fit.1=arima(splited.sample$train$incidence.rate, order = c(2, 1, 4)),
fit.2=arima(splited.sample$train$incidence.rate, order = c(7, 1, 4)),
fit.3=arima(splited.sample$train$incidence.rate, order = c(4, 1, 4))
)
temp <- arima.coef.se(model = model.list$fit.1)
View(temp)
temp <- arima.coef.se(model = model.list$fit.2)
View(temp)
seasinal.model.list <- list(
fit.1 = Arima(splited.sample$train$incidence.rate, order = c(0,1,0), seasonal = c(2,1,5)),
fit.2 = Arima(splited.sample$train$incidence.rate, order = c(0,1,0), seasonal = c(0,1,1))
)
temp <- arima.coef.se(model = seasinal.model.list$fit.2)
View(temp)
temp <- arima.coef.se(model = seasinal.model.list$fit.1)
View(temp)
tidy(seasinal.model.list$fit.1)
seasinal.model.list$fit.1
fit.1 = Arima(splited.sample$train$incidence.rate, order = c(0,1,0), seasonal = c(2,1,5))
View(fit.1)
fit.1 = Arima(splited.sample$train$incidence.rate, order = c(0,1,0), seasonal = c(2,1,5))
View(fit.1)
fit.1 = Arima(splited.sample$train$incidence.rate, order = c(0,1,0), seasonal = c(0,1,1))
View(fit.1)
fit.1 = auto.arima(splited.sample$train$incidence.rate, seasonal = TRUE)
View(fit.1)
fit.1
fit.1 = auto.arima(ts(splited.sample$train$incidence.rate), seasonal = TRUE)
View(fit.1)
fit.1 = auto.arima(ts(splited.sample$train$incidence.rate, frequency = 12), seasonal = TRUE)
View(fit.1)
tidy(fit.1)
temp <- arima.coef.se(fit.1)
View(temp)
fit.1
arima.ts.data.frame <- function(data, frequency = 12) {
data <- ts(data = data, frequency = 12) %>% as.data.frame()
data$date <- as.Date(data$date, origin = "1970-01-01")
return(data)
}
temp <- arima.ts.data.frame(file)
View(temp)
temp
temp <- ts(temp, frequency = 12)
temp
as.data.frame(temp)
temp.1 <- as.data.frame(temp)
temp.2 <- ts(file$incidence, frequency = 12)
typeof(temp.2)
temp.2
temp.1$date
temp.1$incidence
arima.ts.data.frame <- function(data, frequency = 12) {
# 将日期列转换为 Date 类型
data$date <- as.Date(data$date, origin = "1970-01-01")
# 将数据框的其他列转化为时间序列对象
ts_data <- ts(data[, -which(names(data) == "date")], frequency = frequency)
# 将时间序列数据转化为数据框
ts_data <- as.data.frame(ts_data)
# 将处理后的时间序列数据与日期列结合
data <- cbind(data$date, ts_data)
# 设置列名
colnames(data)[1] <- "date"
return(data)
}
temp.1 <- arima.ts.data.frame(file)
View(temp.1)
temp.1$incidence
fit.1 = auto.arima(temp.1$incidence.rate, seasonal = TRUE)
View(fit.1)
fit.1
file$incidence <- ts(file$incidence, frequency = 12)
file$incidence.rate
fit.1 = auto.arima(temp.1$incidence.rate, seasonal = TRUE)
fit.1
temp <- as.list(file)
temp
View(temp)
temp$incidence.rate <- ts(temp$incidence.rate, frequency = 12)
length(file)
file[[1]]
ts_data <- ts(data[, -which(names(data) == "date")], frequency = frequency)
ts_data <- ts(file[, -which(names(data) == "date")], frequency = frequency)
View(file)
file$incidence
arima.ts.data.frame <- function(data, frequency = 12) {
for (index in length(data)) {
data[[index]] <- ts(data[[index]], frequency = frequency)
}
# 将日期列转换为 Date 类型
data$date <- as.Date(data$date, origin = "1970-01-01")
return(data)
}
temp <- arima.ts.data.frame(file)
temp$incidence
temp$incidence.rate
file[[1]] <- ts(file[[1]], frequency = 12)
arima.ts.data.frame <- function(data, frequency = 12) {
for (index in length(data)) {
data[[index]] <- ts(data[[index]], frequency = frequency)
}
# 将日期列转换为 Date 类型
data$date <- as.Date(data$date, origin = "1970-01-01")
return(data)
}
temp <- arima.ts.data.frame(file)
arima.ts.data.frame <- function(data, frequency = 12) {
for (index in c(1:length(data))) {
data[[index]] <- ts(data[[index]], frequency = frequency)
}
# 将日期列转换为 Date 类型
data$date <- as.Date(data$date, origin = "1970-01-01")
return(data)
}
temp <- arima.ts.data.frame(file)
arima.ts.data.frame <- function(data, frequency = 12) {
for (index in c(1:length(data))) {
data[[index]] <- ts(data[[index]], frequency = frequency)
}
# 将日期列转换为 Date 类型
# data$date <- as.Date(data$date, origin = "1970-01-01")
return(data)
}
temp <- arima.ts.data.frame(file)
arima.ts.data.frame <- function(data, frequency = 12) {
for (index in 1:length(data))) {
temp <- arima.ts.data.frame(file)
arima.ts.data.frame <- function(data, frequency = 12) {
for (index in 1:length(data))) {
temp <- arima.ts.data.frame(file)
temp$date
View(temp)
# 将日期列转换为 Date 类型
data$date <- as.Date(data$date, origin = "1970-01-01")
temp$date <- as.Date(temp$date, origin = "1970-01-01")
temp$date <- as.Date.numeric(temp$date, origin = "1970-01-01")
temp$date <- as.Date.character(temp$date, origin = "1970-01-01")
temp$date <- temp$date %>% as.character() %>%  as.Date.character(origin = "1970-01-01")
ts_data <- ts(file[, -which(names(file) == "date")], frequency = frequency)
ts_data <- ts(file[, -which(names(file) == "date")], frequency = 12)
ts_data
View(file)
View(temp)
temp$date <- as.Date(temp$date, origin = "1970-01-01")
names(file)
typeof(names(file))
arima.ts.data.frame <- function(data, frequency = 12) {
for (index in 1:length(data))) {
temp <- arima.ts.data.frame(file)
which(names(file) == "date")
which(names(file) != "date")
temp <- which(names(file) != "date")
1 in temp
1 %in% temp
arima.ts.data.frame <- function(data, frequency = 12) {
indice <- which(names(data[[index]]) != "date")
for (index in 1:length(data))) {
temp <- arima.ts.data.frame(file)
arima.ts.data.frame <- function(data, frequency = 12) {
indice <- which(names(data[[index]]) != "date")
for (index in 1:length(data)) {
if (index %in% indice) {
data[[index]] <- ts(data[[index]], frequency = frequency)
}
}
return(data)
}
temp <- arima.ts.data.frame(file)
arima.ts.data.frame <- function(data, frequency = 12) {
indice <- which(names(data[[index]]) != "date")
for (index in 1:length(data)) {
if (index %in% indice) {
data[[index]] <- ts(data[[index]], frequency = frequency)
}
}
return(data)
}
temp <- arima.ts.data.frame(file)
arima.ts.data.frame <- function(data, frequency = 12) {
indice <- which(names(data) != "date")
for (index in 1:length(data)) {
if (index %in% indice) {
data[[index]] <- ts(data[[index]], frequency = frequency)
}
}
return(data)
}
temp <- arima.ts.data.frame(file)
file <- read_csv("/Users/democardla/Desktop/R/布病时间序列/data/2017-2023_copy.csv")
temp <- arima.ts.data.frame(file)
file <- read_csv("/Users/democardla/Desktop/R/布病时间序列/data/2017-2023_copy.csv")
temp <- arima.ts.data.frame(file)
file <- read_csv("/Users/democardla/Desktop/R/布病时间序列/data/2017-2023_copy.csv")
file <- read_csv("/Users/democardla/Desktop/R/布病时间序列/data/2017-2023_copy.csv")
arima.ts.data.frame <- function(data, frequency = 12) {
indice <- which(names(data) != "date")
for (index in 1:length(data)) {
if (index %in% indice) {
data[[index]] <- ts(data[[index]], frequency = frequency)
}
}
return(data)
}
temp <- NULL
temp <- arima.ts.data.frame(file)
file <- read_csv("/Users/democardla/Desktop/R/布病时间序列/data/2017-2023_copy.csv") %>% arima.ts.data.frame()
file$`Unnamed: 0` <- NULL
splited.sample <- arima.split.sample(file, cut.point = "2023-01-01")
View(splited.sample)
train <- splited.sample$train %>% arima.ts.data.frame()
seasinal.model.list <- list(
fit.1 = Arima(train$incidence.rate, order = c(0, 1, 0), seasonal = c(2, 1, 5)),
fit.2 = Arima(train$incidence.rate, order = c(0, 1, 0), seasonal = c(0, 1, 1))
)
temp <- arima.coef.se(seasinal.model.list$fit.1)
temp
tidy(fit.1)
fit.1
seasinal.model.list$fit.1
seasinal.model.list$fit.2
fit.1 = Arima(train$incidence.rate, order = c(0, 1, 0), seasonal = c(2, 1, 5))
fit.1
fit.1 = Arima(train$incidence.rate, order = c(0, 1, 0), seasonal = c(2, 1, 2))
fit.1
fit.1 = Arima(train$incidence.rate, order = c(0, 1, 0), seasonal = c(1, 1, 1))
fit.1
seasinal.model.list$fit.2
fit.1 = Arima(train$incidence.rate, order = c(1, 1, 0), seasonal = c(1, 1, 1))
fit.1
fit.1 = Arima(train$incidence.rate, order = c(2, 1, 0), seasonal = c(1, 1, 1))
fit.1
fit.1 = Arima(train$incidence.rate, order = c(2, 1, 0), seasonal = c(2, 1, 1))
fit.1
fit.1 = Arima(train$incidence.rate, order = c(2, 1, 0), seasonal = c(3, 1, 1))
fit.1
fit.1 = Arima(train$incidence.rate, order = c(2, 1, 0), seasonal = c(2, 1, 5))
fit.1 = Arima(train$incidence.rate, order = c(0, 1, 0), seasonal = c(2, 1, 5))
fit.1
seasinal.model.list <- list(
fit.1 = Arima(train$incidence.rate, order = c(0, 1, 0), seasonal = c(0, 1, 1))
)
temp <- arima.coef.se(seasinal.model.list$fit.1)
View(temp)
temp.1 <- arima.coef.se(model.list$fit.1)
View(temp.1)
file <- read_csv("/Users/democardla/Desktop/R/布病时间序列/data/2017-2023_copy.csv")
file$date <- as.character(file$date)
file$`Unnamed: 0` <- NULL
splited.sample <- arima.split.sample(file, cut.point = "2023-01-01")
train <- splited.sample$train %>% arima.ts.data.frame()
train$date <- as.Date(train$date)
train$date
train <- splited.sample$train %>% arima.ts.data.frame()
View(train)
#'
#' @param data T: data.frame (S3: data.frame) 包含 `date` 列的数据框。除了 `date` 列外的其他列将被转换为时间序列类型。
#' @param frequency T: numeric (S3: numeric) 时间序列的频率，默认为 12（即每年 12 个观测值）。
#'
#' @returns T: data.frame (S3: data.frame) 返回一个转换后的数据框，其中非 `date` 列被转换为时间序列（ts）类型。
#'
#' @examples
#' # 假设 data 是一个包含 `date` 和其他数值列的数据框
#' result <- arima.ts.data.frame(data, frequency = 12)
#'
arima.ts.data.frame <- function(data, frequency = 12) {
# 找到数据框中非 `date` 列的索引
indice <- which(names(data) != "date")
# 遍历数据框的每一列，将非 `date` 列转换为时间序列
for (index in 1:length(data)) {
if (index %in% indice) {
data[[index]] <- ts(data[[index]], frequency = frequency)
} else {
print("hhhhhh")
data[[index]] <- as.Date(data[[index]])
}
}
return(data)
}
train <- splited.sample$train %>% arima.ts.data.frame()
splited.sample <- arima.split.sample(file, cut.point = "2023-01-01")
train <- splited.sample$train %>% arima.ts.data.frame()
file <- read_csv("/Users/democardla/Desktop/R/布病时间序列/data/2017-2023_copy.csv")
file$`Unnamed: 0` <- NULL
splited.sample <- arima.split.sample(file, cut.point = "2023-01-01")
file$date <- as.character(file$date)
splited.sample <- arima.split.sample(file, cut.point = "2023-01-01")
train <- splited.sample$train %>% arima.ts.data.frame()
check <- splited.sample$check %>% arima.ts.data.frame()
View(file)
temp <- splited.sample$check %>% arima.ts.data.frame()
file <- read_csv("/Users/democardla/Desktop/R/布病时间序列/data/2017-2023_copy.csv")
file$`Unnamed: 0` <- NULL
file$date <- as.character(file$date)
splited.sample <- arima.split.sample(file, cut.point = "2023-01-01")
train <- splited.sample$train %>% arima.ts.data.frame()
check <- splited.sample$check %>% arima.ts.data.frame()
temp <- splited.sample$check %>% arima.ts.data.frame()
model.list <- list(
fit.1 = arima(train$incidence.rate, order = c(2, 1, 4)),
fit.2 = arima(train$incidence.rate, order = c(7, 1, 4)),
fit.3 = arima(train$incidence.rate, order = c(4, 1, 4))
)
seasonal.model.list <- list(
fit.1 = Arima(train$incidence.rate, order = c(0, 1, 0), seasonal = c(0, 1, 1))
)
# fit.1 <- auto.arima(ts(splited.sample$train$incidence.rate, frequency = 12), seasonal = TRUE)
tidy(fit.1)
temp <- arima.coef.se(seasonal.model.list$fit.1)
temp.1 <- arima.coef.se(model.list$fit.1)
arima.stationary.test(train$incidence.rate)
adf.test(train$incidence.rate, k = 1) # 使用k=1选择滞后阶数
#' 对给定数据列进行 Augmented Dickey-Fuller（ADF）检验，检查数据是否平稳。
#'
#' @param observe T: numeric 向量，需要进行平稳性检验的时间序列数据列
#' @param d T: integer 差分阶数，指定进行几阶差分
#'
#' @returns T: list 返回ADF检验的结果，包括统计量和p值
#' @export
#'
#' @examples
#' adf_results <- arima.stationary.test(file.time.train$diff.incidence.rate, d = 1)
arima.stationary.test <- function(observe, d = 0) {
diff <- observe
# 对观察值进行差分
if(d != 0) {
diff_data <- diff(observe, differences = d)
}
# 执行ADF检验
adf_result <- adf.test(diff_data, k = 1) # 使用k=1选择滞后阶数
return(adf_result)
}
arima.stationary.test(train$incidence.rate)
#' 对给定数据列进行 Augmented Dickey-Fuller（ADF）检验，检查数据是否平稳。
#'
#' @param observe T: numeric 向量，需要进行平稳性检验的时间序列数据列
#' @param d T: integer 差分阶数，指定进行几阶差分
#'
#' @returns T: list 返回ADF检验的结果，包括统计量和p值
#' @export
#'
#' @examples
#' adf_results <- arima.stationary.test(file.time.train$diff.incidence.rate, d = 1)
arima.stationary.test <- function(observe, d = 0) {
diff_data <- observe
# 对观察值进行差分
if(d != 0) {
diff_data <- diff(observe, differences = d)
}
# 执行ADF检验
adf_result <- adf.test(diff_data, k = 1) # 使用k=1选择滞后阶数
return(adf_result)
}
arima.stationary.test(train$incidence.rate)
